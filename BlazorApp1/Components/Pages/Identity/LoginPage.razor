
@page "/Account/Login"
<EditForm Model="loginModel" method="post" OnValidSubmit="LoginAsync" FormName="Login" Enhance>
	<div class="card border-primary shadow-lg text-black p-4" style="border-radius: 24px; min-width: 320px; max-width: 400px; margin: auto;">

		<div class="card-header text-center bg-primary text-white fs-4" style="border-radius: 20px 20px 0 0;">
			Acceder
		</div>

		<div class="card-body" style="opacity: 1;">
			<DataAnnotationsValidator />

			<div class="form-floating mb-4">
				<InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Correo Electrónico" />
				<label for="email">Correo Electrónico:</label>
				<ValidationMessage For="() => loginModel.Email" class="text-danger small" />
			</div>

			<div class="form-floating mb-4">
				<InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Contraseña" />
				<label for="password">Contraseña:</label>
				<ValidationMessage For="() => loginModel.Password" class="text-danger small" />
			</div>

			<div class="d-flex justify-content-center">
				<button type="submit" class="btn btn-success w-75 mt-3">Iniciar Sesión</button>
			</div>
		</div>
	</div>
</EditForm>


@code {

	string ErrorMessage = "";
	public bool IsBusy { get; set; } = false;


	[SupplyParameterFromForm]
	private LoginUserRequestDTO loginModel { get; set; } = new();

	private async Task LoginAsync()
	
	{
		if (IsBusy) return;
		ErrorMessage = "";
		IsBusy = true;

		var response = await accountService.LoginAsync(loginModel);

		if(!response.Flag)
		{
			IsBusy = false;
			ErrorMessage = response.Message;
			return;
		}
		IsBusy = false;
		NavManager.NavigateTo(uri: "app/home", true);

	}

	[CascadingParameter]

	public Task<AuthenticationState>? ClientAuthState { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
				NavManager.NavigateTo("app/home", false, true);
		}
		catch
		{
			
		}
	}



}
